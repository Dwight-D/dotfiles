#!/bin/bash

#    _    _ _                     
#   / \  | (_) __ _ ___  ___  ___ 
#  / _ \ | | |/ _` / __|/ _ \/ __|
# / ___ \| | | (_| \__ \  __/\__ \
#/_/   \_\_|_|\__,_|___/\___||___/
#
##################################

#======PROGRAM REDIRECTS=====
if [ -x "$(command -v backpack)" ]; then
    alias ssh='backpack'
fi

if [ -x "$(command -v bat)" ]; then
    alias less='bat'
fi

function ranger-cd {
    tempfile="$(mktemp -t tmp.XXXXXX)"
    ranger --choosedir="$tempfile" "${@:-$(pwd)}"
    test -f "$tempfile" &&
    if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
        cd "$(cat "$tempfile")"
    fi
    rm -f -- "$tempfile"
}
alias sdiff='sdiff --diff-program=colordiff'

#========NAVIGATION==========
alias xfiles="cd /mnt/xfiles"
alias nodc="cd ~/projects/nodc-root/nodc-modules"

#===========MISC============
alias cp="cp -i"                          # confirm before overwriting something
alias df='df -h'                          # human-readable sizes
alias free='free -m'                      # show sizes in MB
alias tt='(urxvt &)'
alias shrug='echo  ¯\\_\(ツ\)_/¯ | xclip -i -selection c'
alias xmlf='xmllint --format -'

#=======SHORTCUTS==========
alias issh='initssh'
alias fuck='sudo $(history -p !!)'
alias la='ls -lah'
alias ll='ls -lh'
alias rr='ranger'
alias makeover='wal -i /home/max/shared/wallpaper/dual -a 75 --backend=colorz'
alias rss='canto-curses'
alias cgrep='grep --color=auto -C 10'

#========SVN============
if [ -x "$(command -v colorsvn)" ]; then
    alias svn='colorsvn'
fi

#=========GIT============
alias glog='git log --decorate --graph --all --abbrev-commit'
alias forest="git-forest --pretty=format:\"%C(red)%h %C(magenta)(%ar) %C(blue)%an %C(reset)%s\" --style=15 --reverse | less"

#  _____                 _   _                 
# |  ___|   _ _ __   ___| |_(_) ___  _ __  ___ 
# | |_ | | | | '_ \ / __| __| |/ _ \| '_ \/ __|
# |  _|| |_| | | | | (__| |_| | (_) | | | \__ \
# |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
#
###############################################

#Remove prompt command
cleanprompt() {
    PS1="$COL1B\u $COL7 - $COL6B \w\n$COL1B>$COL2B "
    PROMPT_COMMAND=""
    echo "Good as new"
}

#Override cd (suppress path echo)
function cd() {
    if [ -z "$*" ]; then 
        destination=~
    else
        destination=$*
    fi
    builtin cd "${destination}" >/dev/null && ls --color=auto
}

# # ex - archive extractor
# # usage: ex <file>
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xvjf $1   ;;
      *.tar.gz)    
          tar xvzf $1   
          if [ $? -ne 0 ]; then
              tar xvf $1
          fi    ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xvf $1    ;;
      *.tbz2)      tar xvjf $1   ;;
      *.tgz)       tar xvzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

#    _              _ _     _      
#   / \   _ __  ___(_) |__ | | ___ 
#  / _ \ | '_ \/ __| | '_ \| |/ _ \
# / ___ \| | | \__ \ | |_) | |  __/
#/_/   \_\_| |_|___/_|_.__/|_|\___|
#
###################################

arole (){
    if [ "$#" -lt 1 ]; then
        echo "Provide at least one role to create"
        return
    fi
    for var in "$@"; do
        for dir in tasks files vars; do
            mkdir -p "roles/$var/$dir"
        done
        touch roles/$var/tasks/main.yml

    done
}

#  , _                                 
# /|/ \                             |  
#  |   |   __ _|_  _    _   __,   __|  
#  |   |  /  \_|  |/  |/ \_/  |  /  |  
#  |   |_/\__/ |_/|__/|__/ \_/|_/\_/|_/
#                    /|                
#                    \|      
#=======================================

note() {

    if [ "$#" -lt 2 ]; then
        echo "You forgot to specify a note"
        return
    else
        local note="$NOTEPAD/$1"
        if [ ! -f "$note" ]; then
            echo "No such note"
            return
        fi
        shift
        echo "$@" >> $note
    fi
}

notepad() {
    local option="$1"
    local note="$NOTEPAD/$2"
    shift

    case $option in
        show )
            ;&
        read )
            tail -f $note
            ;;
        burn )
            truncate -s 0 $note
            ;;
        trim )
            tail -n 100 $note >| $note
            ;;
        list )
            echo "Notes:"
            for file in $NOTEPAD/*; do
                echo -n "$(basename $file), "
                echo $(wc -l $file | cut -d " " -f 1) lines
            done
            ;;
        new )
            echo "New note: $note"
            touch $note
            ;;
        * )
            echo "Bad instructions dummy"
            ;;
    esac
}

# ____             _             
#|  _ \  ___   ___| | _____ _ __ 
#| | | |/ _ \ / __| |/ / _ \ '__|
#| |_| | (_) | (__|   <  __/ |   
#|____/ \___/ \___|_|\_\___|_|

dr (){
case $1 in
    kill )
        read -p "Kill all containers?" -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            docker kill $(docker ps -q)
        fi
        ;;
    rm )
        read -p "Remove all containers?" -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            docker container rm $(docker container ls -aq)
        fi
        ;;
    nuke )
        read -p "Stopping containers and removing ALL docker data. Continue?" -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            yes | dr kill
            yes | dr rm
            yes | docker system prune --volumes
        fi
        ;;
esac
}

# ______     ___   _ 
#/ ___\ \   / / \ | |
#\___ \\ \ / /|  \| |
# ___) |\ V / | |\  |
#|____/  \_/  |_| \_|


asvn(){
    echo "Adding the following files: "
    lsvn ?
    echo "Continue? y/n"
    read ans
    if [[ "$ans" = "y" || "$ans" = "Y" ]]; then
        lsvn ? | sed 's/^/svn add /' | bash
    else
        echo "Chickened out"
    fi
}

rsvn(){
    echo "Removing the following files:
"
    lsvn !
    echo Are you sure? yes/no
    read ans
    if [[ "$ans" = "y" || "$ans" = "Y" ]]; then
        echo Deleting...
        lsvn ! | sed 's/^/svn rm /' | bash
    else
        echo "Chickened out"
    fi
}

lsvn (){
    if [ "$#" -eq 0 ]; then
        svn status
    else
        while [ ! -z "$1" ]; do
            local arg="${1^^}"
            if [ "$arg" = ? ]; then
                arg="\?"
            fi
            svn status | grep -E "^$arg" | sed "s/$arg       //"
            shift
         done

    fi
}

